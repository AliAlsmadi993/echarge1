@model List<echarge1.Models.EmergencyMessage>
@{
    ViewData["Title"] = "Emergency Chat";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var requestId = ViewBag.RequestId;
    var currentUserId = ViewBag.CurrentUserId;
    var location = ViewBag.RequestLocation as string;
}

@section Styles {
    <style>
        .chat-container {
            max-width: 850px;
            margin: 30px auto;
            background: #ffffff;
            border-radius: 12px;
            padding: 25px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        }

        .map-btn {
            text-align: center;
            margin-bottom: 15px;
        }

            .map-btn a {
                background-color: #3498db;
                color: white;
                padding: 10px 20px;
                border-radius: 10px;
                text-decoration: none;
                transition: background-color 0.3s;
            }

                .map-btn a:hover {
                    background-color: #2980b9;
                }

        .message-box {
            max-height: 400px;
            overflow-y: auto;
            padding: 15px;
            border: 1px solid #ccc;
            border-radius: 12px;
            margin-bottom: 20px;
            background-color: #fafafa;
        }

        .message {
            padding: 12px 16px;
            border-radius: 10px;
            margin-bottom: 12px;
            max-width: 70%;
            word-wrap: break-word;
            position: relative;
            transition: all 0.3s;
        }

        .from-me {
            background-color: #1abc9c;
            color: white;
            margin-left: auto;
            text-align: right;
        }

        .from-them {
            background-color: #ecf0f1;
            color: #2c3e50;
            margin-right: auto;
        }

        .timestamp {
            font-size: 12px;
            opacity: 0.7;
            display: block;
            margin-top: 5px;
        }

        .send-box {
            display: flex;
            gap: 10px;
        }

            .send-box input {
                flex: 1;
                padding: 10px 15px;
                border-radius: 10px;
                border: 1px solid #ccc;
                transition: 0.2s;
            }

                .send-box input:focus {
                    border-color: #1abc9c;
                }

            .send-box button {
                background-color: #1abc9c;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 10px;
                transition: background 0.2s;
            }

                .send-box button:hover {
                    background-color: #16a085;
                }
    </style>
}

<div class="chat-container">
    <h3 class="text-center mb-4">💬 Emergency Chat</h3>

    @if (!string.IsNullOrWhiteSpace(location))
    {
        <div class="map-btn">
            <a href="/Map?latlng=@location" target="_blank">
                📍 View User Location on Map
            </a>
        </div>
    }

    <div class="message-box" id="chatBox">
        @foreach (var msg in Model)
        {
            var isMe = msg.SenderId == currentUserId;
            <div class="message @(isMe ? "from-me" : "from-them")">
                <strong>@msg.Sender.FullName</strong><br />
                @msg.MessageText
                <span class="timestamp">@msg.SentAt?.ToString("HH:mm")</span>
            </div>
        }
    </div>

    <form class="send-box" onsubmit="sendMessage(); return false;">
        <input type="text" id="msgInput" placeholder="Type a message..." />
        <button type="submit">Send</button>
    </form>
</div>

@section Scripts {
    <script>
        const requestId = parseInt("@requestId") || 0;

        function sendMessage() {
            const msg = document.getElementById("msgInput").value.trim();
            if (msg === "") return;

            fetch(`/Emergency/SendMessage`, {
                method: "POST",
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: `requestId=${requestId}&message=${encodeURIComponent(msg)}`
            })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        document.getElementById("msgInput").value = "";
                        loadMessages();
                    }
                });
        }

        function loadMessages() {
            fetch(`/Emergency/GetMessages?requestId=${requestId}`)
                .then(res => res.json())
                .then(data => {
                    const box = document.getElementById("chatBox");
                    box.innerHTML = "";
                    data.forEach(m => {
                        const isMe = m.senderId == @currentUserId;
                        const div = document.createElement("div");
                        div.className = "message " + (isMe ? "from-me" : "from-them");
                        div.innerHTML = `<strong>${m.senderName}</strong><br/>${m.messageText}<span class="timestamp">${m.time}</span>`;
                        box.appendChild(div);
                    });
                    box.scrollTop = box.scrollHeight;
                });
        }

        setInterval(loadMessages, 3000);
        loadMessages();
    </script>
}
